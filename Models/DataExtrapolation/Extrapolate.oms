import java.text.SimpleDateFormat
import java.util.Date

val i = Val[Int]
val year = Val[String]

// res
val iris = Val[String]
val medianIncome = Val[Array[Double]]
val avgIncome = Val[Array[Double]]
val shares = Val[Array[Double]]
val distrib = Val[String]

val extrapolate =  RTask("""
      source('inverseKernels.R')
      income <- getIncome(year)
      structure <-getStructure(year)
      show(paste0("year = ",year," ; ",nrow(income)))
      if(i <= nrow(income)){
        iris = income$IRIS[i]
        est = estimateParameters(iris,income,structure,year,iters.max=10)
        med = est$medincome
        avg = est$avincome
	shares = est$shares
	distrib = est$distrib
      }else{iris=0;med=c();avg=c();shares=c();distrib=""}
    """,
    libraries = Seq("GA","MASS","dplyr")
    ) set(
      resources += workDirectory / "inverseKernels.R",
      resources += workDirectory / "data",
      rInputs += (year, "year"),
      rInputs += (i,"i"),
      rOutputs += ("iris",iris),
      rOutputs += ("med",medianIncome),
      rOutputs += ("avg",avgIncome),
      rOutputs += ("shares",shares),
      rOutputs += ("distrib",distrib),
      inputs += (year,i),
      outputs += (year,i)
    )

val purpose = "TEST"

val indics = CSVHook(workDirectory / "res" / "extrapolate_"+purpose+"_"+((new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss")).format(new Date()))+".csv") set (arraysOnSingleRow := true)

//val grid =  EGIEnvironment("vo.complex-systems.eu")
val local = LocalEnvironment(10)

// exploration
val extrapolateall = DirectSampling(
    evaluation = extrapolate hook indics on local,
    sampling = (year in Seq("01","02","04","05","06","07","08","09","10","11")) x (i is 20)//(i in 1 to 4175 by 1)
)


extrapolateall
